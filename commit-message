#!/bin/sh
#
# Git commit-msg hook to enforce Conventional Commits 1.0.0

# Regex for header line only
header_regex='^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\([a-z0-9\-]+\))?!?: [a-z][a-z0-9\- ]*$'

commit_message_file=$1
commit_message=$(cat "$commit_message_file")

# Split message into lines
header=$(echo "$commit_message" | head -n1)
rest=$(echo "$commit_message" | tail -n +2)

# 1. Validate header
if ! printf "%s" "$header" | grep -Eq "$header_regex"; then
  echo "❌ Invalid commit message header: \"$header\""
  echo ""
  echo "Expected format:"
  echo "  type(scope): description"
  echo ""
  echo "Examples:"
  echo "  feat(api): add login endpoint"
  echo "  fix(ui): handle null pointer exception"
  echo "  docs(readme): update installation guide"
  echo ""
  exit 1
fi

# 2. Validate footers (if present)
# Footers must start after a blank line and follow "token: value" format
footer_regex='^(BREAKING CHANGE|Closes|Refs)(:| #)[[:space:]]?.+'

in_footer=0
echo "$rest" | while IFS= read -r line; do
  if [ -z "$line" ]; then
    continue
  fi

  # Detect start of footer section
  if echo "$line" | grep -Eq "$footer_regex"; then
    in_footer=1
  fi

  # Once in footer, enforce format
  if [ "$in_footer" -eq 1 ] && ! echo "$line" | grep -Eq "$footer_regex"; then
    echo "❌ Invalid footer line: \"$line\""
    echo "Footers must look like:"
    echo "  BREAKING CHANGE: description"
    echo "  Closes #123"
    echo "  Refs #456"
    exit 1
  fi
done

exit 0